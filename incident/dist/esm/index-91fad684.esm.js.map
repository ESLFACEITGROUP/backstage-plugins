{"version":3,"file":"index-91fad684.esm.js","sources":["../../src/api/client.ts","../../src/plugin.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  DiscoveryApi,\n  IdentityApi,\n  createApiRef,\n} from '@backstage/core-plugin-api';\n\nexport const IncidentApiRef = createApiRef<Incident>({\n  id: 'plugin.incident.service',\n});\n\ntype HTTPMethods = 'GET' | 'PUT' | 'POST' | 'PATCH' | 'DELETE';\n\nexport interface Incident {\n  request<T>({\n    method,\n    path,\n    body,\n  }: {\n    method?: HTTPMethods;\n    path: string;\n    body?: string;\n  }): Promise<T>;\n}\n\nconst DEFAULT_PROXY_PATH = '/incident/api';\n\ntype Options = {\n  discoveryApi: DiscoveryApi;\n  identityApi: IdentityApi;\n  proxyPath?: string;\n};\n\nexport class IncidentApi implements Incident {\n  private readonly discoveryApi: DiscoveryApi;\n  private readonly identityApi: IdentityApi;\n  private readonly proxyPath: string;\n\n  constructor(opts: Options) {\n    this.discoveryApi = opts.discoveryApi;\n    this.identityApi = opts.identityApi;\n    this.proxyPath = opts.proxyPath ?? DEFAULT_PROXY_PATH;\n  }\n\n  async request<T = any>({\n    path,\n    method = 'GET',\n    body,\n  }: {\n    path: string;\n    method?: HTTPMethods;\n    body?: string;\n  }): Promise<T> {\n    const apiUrl =\n      (await this.discoveryApi.getBaseUrl('proxy')) + this.proxyPath;\n    const { token } = await this.identityApi.getCredentials();\n\n    const resp = await fetch(`${apiUrl}${path}`, {\n      method: method,\n      body: body,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    if (!resp.ok) {\n      throw new Error(`${resp.status} ${resp.statusText}`);\n    }\n\n    return await resp.json();\n  }\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  createApiFactory,\n  createComponentExtension,\n  createPlugin,\n  discoveryApiRef,\n  identityApiRef,\n} from '@backstage/core-plugin-api';\n\nimport { IncidentApi, IncidentApiRef } from './api/client';\n\nexport const incidentPlugin = createPlugin({\n  id: 'incident',\n  apis: [\n    createApiFactory({\n      api: IncidentApiRef,\n      deps: { discoveryApi: discoveryApiRef, identityApi: identityApiRef },\n      factory: ({ discoveryApi, identityApi }) => {\n        return new IncidentApi({\n          discoveryApi: discoveryApi,\n          identityApi: identityApi,\n        });\n      },\n    }),\n  ],\n});\n\nexport const EntityIncidentCard = incidentPlugin.provide(\n  createComponentExtension({\n    name: 'EntityIncidentCard',\n    component: {\n      lazy: () =>\n        import('./components/EntityIncidentCard').then(\n          m => m.EntityIncidentCard,\n        ),\n    },\n  }),\n);\n"],"names":[],"mappings":";;AAqBO,MAAM,iBAAiB,YAAuB,CAAA;AAAA,EACnD,EAAI,EAAA,yBAAA;AACN,CAAC,EAAA;AAgBD,MAAM,kBAAqB,GAAA,eAAA,CAAA;AAQpB,MAAM,WAAgC,CAAA;AAAA,EAK3C,YAAY,IAAe,EAAA;AApD7B,IAAA,IAAA,EAAA,CAAA;AAqDI,IAAA,IAAA,CAAK,eAAe,IAAK,CAAA,YAAA,CAAA;AACzB,IAAA,IAAA,CAAK,cAAc,IAAK,CAAA,WAAA,CAAA;AACxB,IAAK,IAAA,CAAA,SAAA,GAAA,CAAY,EAAK,GAAA,IAAA,CAAA,SAAA,KAAL,IAAkB,GAAA,EAAA,GAAA,kBAAA,CAAA;AAAA,GACrC;AAAA,EAEA,MAAM,OAAiB,CAAA;AAAA,IACrB,IAAA;AAAA,IACA,MAAS,GAAA,KAAA;AAAA,IACT,IAAA;AAAA,GAKa,EAAA;AACb,IAAA,MAAM,SACH,MAAM,IAAA,CAAK,aAAa,UAAW,CAAA,OAAO,IAAK,IAAK,CAAA,SAAA,CAAA;AACvD,IAAA,MAAM,EAAE,KAAM,EAAA,GAAI,MAAM,IAAA,CAAK,YAAY,cAAe,EAAA,CAAA;AAExD,IAAA,MAAM,IAAO,GAAA,MAAM,KAAM,CAAA,CAAA,EAAG,SAAS,IAAQ,CAAA,CAAA,EAAA;AAAA,MAC3C,MAAA;AAAA,MACA,IAAA;AAAA,MACA,OAAS,EAAA;AAAA,QACP,eAAe,CAAU,OAAA,EAAA,KAAA,CAAA,CAAA;AAAA,OAC3B;AAAA,KACD,CAAA,CAAA;AACD,IAAI,IAAA,CAAC,KAAK,EAAI,EAAA;AACZ,MAAA,MAAM,IAAI,KAAM,CAAA,CAAA,EAAG,IAAK,CAAA,MAAA,CAAA,CAAA,EAAU,KAAK,UAAY,CAAA,CAAA,CAAA,CAAA;AAAA,KACrD;AAEA,IAAO,OAAA,MAAM,KAAK,IAAK,EAAA,CAAA;AAAA,GACzB;AACF;;AC3DO,MAAM,iBAAiB,YAAa,CAAA;AAAA,EACzC,EAAI,EAAA,UAAA;AAAA,EACJ,IAAM,EAAA;AAAA,IACJ,gBAAiB,CAAA;AAAA,MACf,GAAK,EAAA,cAAA;AAAA,MACL,IAAM,EAAA,EAAE,YAAc,EAAA,eAAA,EAAiB,aAAa,cAAe,EAAA;AAAA,MACnE,OAAS,EAAA,CAAC,EAAE,YAAA,EAAc,aAAkB,KAAA;AAC1C,QAAA,OAAO,IAAI,WAAY,CAAA;AAAA,UACrB,YAAA;AAAA,UACA,WAAA;AAAA,SACD,CAAA,CAAA;AAAA,OACH;AAAA,KACD,CAAA;AAAA,GACH;AACF,CAAC,EAAA;AAEM,MAAM,qBAAqB,cAAe,CAAA,OAAA;AAAA,EAC/C,wBAAyB,CAAA;AAAA,IACvB,IAAM,EAAA,oBAAA;AAAA,IACN,SAAW,EAAA;AAAA,MACT,IAAM,EAAA,MACJ,OAAO,yBAAiC,CAAE,CAAA,IAAA;AAAA,QACxC,OAAK,CAAE,CAAA,kBAAA;AAAA,OACT;AAAA,KACJ;AAAA,GACD,CAAA;AACH;;;;"}